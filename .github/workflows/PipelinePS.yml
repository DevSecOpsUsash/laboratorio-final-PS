name: DevSecOps-FinalLab

on:
  push:
    branches:
      - feature-finalLab

jobs:
  SAST-SonarCloud:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js for the React Native project
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Install project dependencies
      - name: Install dependencies
        run: npm install

      # Build the project (if necessary for analysis)
      - name: Build the project
        run: npm run build

      # Set up Java (required by SonarCloud)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # Run SonarCloud analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: . # Adjust this if your React Native project is in a subdirectory
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECTKEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=src
            -Dsonar.exclusions=**/node_modules/**,**/android/**,**/ios/**
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  SCA-SNYK:
    needs: SAST-SonarCloud
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js for React Native
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Step 3: Install project dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Install Snyk CLI
      - name: Install Snyk CLI
        run: npm install -g snyk

      # Step 5: Authenticate with Snyk using the token from GitHub Secrets
      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      # Step 6: Run Snyk test to check for vulnerabilities
      - name: Run Snyk Test
        run: |
          snyk test --all-projects --json > snyk-results.json || true

      # Optional: Monitor dependencies with Snyk (submit project to Snyk)
      - name: Monitor with Snyk
        run: snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Optional: Fail the build if vulnerabilities are found
      - name: Fail the build if vulnerabilities are found
        run: |
          if snyk test --all-projects --json | jq '.vulnerabilities | length' | grep -q '0'; then
            echo "No vulnerabilities found."
          else
            echo "Vulnerabilities found."
          fi

  Docker-build:
    needs: SCA-SNYK
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/devsecops-finallab:latest .

      # Step 4: Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/devsecops-finallab:latest

  Trivy-scan-docker-image:
    needs: Docker-build
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub (optional if private image)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Pull the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/devsecops-finallab:latest

      # Step 4: Scan the Docker image with Trivy
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/devsecops-finallab:latest
          format: table
          severity: HIGH,CRITICAL
        continue-on-error: true
  Deploy-to-AWS-EC2:
    name: Deploy to AWS EC2
    needs: Trivy-scan-docker-image
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up SSH agent
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/devsecops-finallab:latest
            docker stop devsecops-container || true
            docker rm devsecops-container || true
            docker run -d --name devsecops-container -p 80:80 ${{ secrets.DOCKER_USERNAME }}/devsecops-finallab:latest