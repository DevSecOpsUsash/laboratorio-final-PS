name: DevSecOps-FinalLab

on:
  push:
    branches:
      - feature-finalLab

jobs:
  SAST-SonarCloud:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js for the React Native project
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Install project dependencies
      - name: Install dependencies
        run: npm install

      # Build the project (if necessary for analysis)
      - name: Build the project
        run: npm run build

      # Set up Java (required by SonarCloud)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # Run SonarCloud analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: . # Adjust this if your React Native project is in a subdirectory
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECTKEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.branch.name=feature-finalLab
            -Dsonar.sources=src
            -Dsonar.exclusions=**/node_modules/**,**/android/**,**/ios/**
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      # Upload SonarCloud Issues Report as Artifact
      - name: Upload SonarCloud Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sonarcloud-report
          path: sonar-report.json

      # Check SonarCloud for High-Severity Issues
      - name: Check for High-Severity Issues
        run: |
          response=$(curl -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/issues/search?componentKeys=${{ secrets.SONAR_PROJECTKEY }}&severities=MINOR,MAJOR&statuses=OPEN")
          count=$(echo "$response" | jq '.total')
          echo "Found $count medium-severity (MAJOR) OR low-severity (MINOR) issues."
          if [ "$count" -gt 0 ]; then
            echo "Pipeline failed due to medium-severity OR low-severity issues."
            exit 1
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  SCA-SNYK:
    needs: SAST-SonarCloud
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js for React Native
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Step 3: Install project dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Install Snyk CLI
      - name: Install Snyk CLI
        run: npm install -g snyk

      # Step 5: Authenticate with Snyk using the token from GitHub Secrets
      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      # Step 5: Run Snyk scan for open-source dependencies (e.g., package.json)
      - name: Run Snyk Test and Generate Report
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --all-projects --json-file-output=snyk-report.json || true
        continue-on-error: true

      - name: Save Snyk Report
        uses: actions/upload-artifact@v3
        with:
          name: snyk-report
          path: snyk-report.json

      # Optional: Monitor dependencies with Snyk (submit project to Snyk)
      - name: Monitor with Snyk
        run: snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  Docker-build:
    needs: SCA-SNYK
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/devsecops-finallab:latest .

      # Step 4: Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/devsecops-finallab:latest

  Trivy-scan-docker-image:
    needs: Docker-build
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      # Step 2: Log in to Docker Hub (optional if private image)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Pull the Docker image to Docker Hub
      - name: Pull Docker image to Docker Hub
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/devsecops-finallab:latest

      # Scan a Docker image
      - name: Run Trivy Scan on Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/devsecops-finallab:latest .
          mkdir -p reports
          trivy image --severity CRITICAL,HIGH,MEDIUM,LOW --format table --output reports/trivy-image-scan.txt --exit-code 1 ${{ secrets.DOCKER_USERNAME }}/devsecops-finallab:latest

      # Save Trivy Report as GitHub Action Artifact
      - name: Upload Trivy Report
        if: failure() || always()
        uses: actions/upload-artifact@v3
        with:
          name: trivy-docker-scan-report
          path: reports/trivy-image-scan.txt

  Deploy-to-AWS-EC2:
    name: Deploy to AWS EC2
    needs: Trivy-scan-docker-image
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up SSH agent
      - name: Deploy to EC2
        run: |
          echo "Deploy Successful"